/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RadiusCatalystMineInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "RADIUS_MINE_ADMIN()": FunctionFragment;
    "_RadiusMine_init(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculatePayout(address,uint256,uint256)": FunctionFragment;
    "currentPayout(address,uint256,uint256,uint256)": FunctionFragment;
    "currentPayoutOf(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositFrom(address,uint256)": FunctionFragment;
    "earnedPerPeriod()": FunctionFragment;
    "earnedPerToken()": FunctionFragment;
    "erc20tokenIsAllowed(address)": FunctionFragment;
    "getErc1155TokenMinedIndex()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "mine()": FunctionFragment;
    "mineOne(address)": FunctionFragment;
    "minedBalanceOf(address)": FunctionFragment;
    "periodLength()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowedErc20Token(address)": FunctionFragment;
    "setEarnedPerPeriod(uint256)": FunctionFragment;
    "setEarnedPerToken(uint256)": FunctionFragment;
    "setErc1155TokenMinedIndex(uint256)": FunctionFragment;
    "setPeriodLength(uint256)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawMined()": FunctionFragment;
    "withdrawMinedTo(address)": FunctionFragment;
    "withdrawTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RADIUS_MINE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_RadiusMine_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculatePayout",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPayout",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPayoutOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20tokenIsAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getErc1155TokenMinedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "mine", values?: undefined): string;
  encodeFunctionData(functionFragment: "mineOne", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedErc20Token",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedPerPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnedPerToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setErc1155TokenMinedIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMined",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMinedTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RADIUS_MINE_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_RadiusMine_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPayoutOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20tokenIsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getErc1155TokenMinedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mineOne", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnedPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setErc1155TokenMinedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMinedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256)": EventFragment;
    "Mined(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
    "WithdrawnMined(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnMined"): EventFragment;
}

export class RadiusCatalystMine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RadiusCatalystMineInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    RADIUS_MINE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "RADIUS_MINE_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    _RadiusMine_init(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_RadiusMine_init(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePayout(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculatePayout(address,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPayout(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentPayout(address,uint256,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPayoutOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentPayoutOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earnedPerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "earnedPerPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    earnedPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    "earnedPerToken()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    erc20tokenIsAllowed(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "erc20tokenIsAllowed(address)"(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getErc1155TokenMinedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getErc1155TokenMinedIndex()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mine(overrides?: Overrides): Promise<ContractTransaction>;

    "mine()"(overrides?: Overrides): Promise<ContractTransaction>;

    mineOne(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mineOne(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minedBalanceOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minedBalanceOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAllowedErc20Token(
      erc20token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowedErc20Token(address)"(
      erc20token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedPerPeriod(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedPerPeriod(uint256)"(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEarnedPerToken(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEarnedPerToken(uint256)"(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setErc1155TokenMinedIndex(
      mindex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setErc1155TokenMinedIndex(uint256)"(
      mindex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPeriodLength(
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPeriodLength(uint256)"(
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawMined(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawMined()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawMinedTo(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawMinedTo(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawTo(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTo(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  RADIUS_MINE_ADMIN(overrides?: CallOverrides): Promise<string>;

  "RADIUS_MINE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  _RadiusMine_init(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_RadiusMine_init(address)"(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePayout(
    depositor: string,
    depbal: BigNumberish,
    depositInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePayout(address,uint256,uint256)"(
    depositor: string,
    depbal: BigNumberish,
    depositInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPayout(
    depositor: string,
    depbal: BigNumberish,
    depositTimestamp: BigNumberish,
    currentTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentPayout(address,uint256,uint256,uint256)"(
    depositor: string,
    depbal: BigNumberish,
    depositTimestamp: BigNumberish,
    currentTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPayoutOf(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentPayoutOf(address)"(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFrom(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earnedPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "earnedPerPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  earnedPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  "earnedPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  erc20tokenIsAllowed(
    erc20token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "erc20tokenIsAllowed(address)"(
    erc20token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getErc1155TokenMinedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "getErc1155TokenMinedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mine(overrides?: Overrides): Promise<ContractTransaction>;

  "mine()"(overrides?: Overrides): Promise<ContractTransaction>;

  mineOne(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  "mineOne(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minedBalanceOf(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minedBalanceOf(address)"(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAllowedErc20Token(
    erc20token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowedErc20Token(address)"(
    erc20token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedPerPeriod(
    earned: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedPerPeriod(uint256)"(
    earned: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEarnedPerToken(
    earned: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEarnedPerToken(uint256)"(
    earned: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setErc1155TokenMinedIndex(
    mindex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setErc1155TokenMinedIndex(uint256)"(
    mindex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPeriodLength(
    length: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPeriodLength(uint256)"(
    length: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawMined(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawMined()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawMinedTo(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawMinedTo(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawTo(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTo(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    RADIUS_MINE_ADMIN(overrides?: CallOverrides): Promise<string>;

    "RADIUS_MINE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    _RadiusMine_init(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "_RadiusMine_init(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePayout(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePayout(address,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPayout(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentPayout(address,uint256,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPayoutOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentPayoutOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    earnedPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "earnedPerPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    earnedPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "earnedPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    erc20tokenIsAllowed(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "erc20tokenIsAllowed(address)"(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getErc1155TokenMinedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getErc1155TokenMinedIndex()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mine(overrides?: CallOverrides): Promise<void>;

    "mine()"(overrides?: CallOverrides): Promise<void>;

    mineOne(account: string, overrides?: CallOverrides): Promise<void>;

    "mineOne(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minedBalanceOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minedBalanceOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedErc20Token(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowedErc20Token(address)"(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedPerPeriod(
      earned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedPerPeriod(uint256)"(
      earned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnedPerToken(
      earned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEarnedPerToken(uint256)"(
      earned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setErc1155TokenMinedIndex(
      mindex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setErc1155TokenMinedIndex(uint256)"(
      mindex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriodLength(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPeriodLength(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMined(overrides?: CallOverrides): Promise<void>;

    "withdrawMined()"(overrides?: CallOverrides): Promise<void>;

    withdrawMinedTo(account: string, overrides?: CallOverrides): Promise<void>;

    "withdrawMinedTo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTo(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(toAddress: string | null, amount: null): EventFilter;

    Mined(toAddress: string | null, amount: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Withdrawn(toAddress: string | null, amount: null): EventFilter;

    WithdrawnMined(toAddress: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    RADIUS_MINE_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "RADIUS_MINE_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    _RadiusMine_init(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_RadiusMine_init(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePayout(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePayout(address,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPayout(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentPayout(address,uint256,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPayoutOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentPayoutOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earnedPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "earnedPerPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    earnedPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "earnedPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    erc20tokenIsAllowed(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "erc20tokenIsAllowed(address)"(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErc1155TokenMinedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getErc1155TokenMinedIndex()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mine(overrides?: Overrides): Promise<BigNumber>;

    "mine()"(overrides?: Overrides): Promise<BigNumber>;

    mineOne(account: string, overrides?: Overrides): Promise<BigNumber>;

    "mineOne(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minedBalanceOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minedBalanceOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAllowedErc20Token(
      erc20token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowedErc20Token(address)"(
      erc20token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedPerPeriod(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedPerPeriod(uint256)"(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEarnedPerToken(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEarnedPerToken(uint256)"(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setErc1155TokenMinedIndex(
      mindex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setErc1155TokenMinedIndex(uint256)"(
      mindex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPeriodLength(
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPeriodLength(uint256)"(
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawMined(overrides?: Overrides): Promise<BigNumber>;

    "withdrawMined()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawMinedTo(account: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawMinedTo(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawTo(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTo(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RADIUS_MINE_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RADIUS_MINE_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _RadiusMine_init(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_RadiusMine_init(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePayout(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePayout(address,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPayout(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentPayout(address,uint256,uint256,uint256)"(
      depositor: string,
      depbal: BigNumberish,
      depositTimestamp: BigNumberish,
      currentTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPayoutOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentPayoutOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earnedPerPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "earnedPerPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "earnedPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20tokenIsAllowed(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "erc20tokenIsAllowed(address)"(
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getErc1155TokenMinedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getErc1155TokenMinedIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mine(overrides?: Overrides): Promise<PopulatedTransaction>;

    "mine()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    mineOne(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mineOne(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minedBalanceOf(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minedBalanceOf(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAllowedErc20Token(
      erc20token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowedErc20Token(address)"(
      erc20token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedPerPeriod(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedPerPeriod(uint256)"(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEarnedPerToken(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEarnedPerToken(uint256)"(
      earned: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setErc1155TokenMinedIndex(
      mindex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setErc1155TokenMinedIndex(uint256)"(
      mindex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPeriodLength(
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPeriodLength(uint256)"(
      length: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawMined(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawMined()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawMinedTo(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawMinedTo(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTo(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
