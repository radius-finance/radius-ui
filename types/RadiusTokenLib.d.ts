/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RadiusTokenLibInterface extends ethers.utils.Interface {
  functions: {
    "CATALYST()": FunctionFragment;
    "FORGE_DIVISOR()": FunctionFragment;
    "GAS()": FunctionFragment;
    "LOTTERY()": FunctionFragment;
    "RADIUS()": FunctionFragment;
    "RADIUS_FEEPERTHOU()": FunctionFragment;
    "hash(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CATALYST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FORGE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GAS", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOTTERY", values?: undefined): string;
  encodeFunctionData(functionFragment: "RADIUS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RADIUS_FEEPERTHOU",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CATALYST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FORGE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GAS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOTTERY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RADIUS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RADIUS_FEEPERTHOU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;

  events: {
    "ConvertedToERC1155(uint256,address,uint256)": EventFragment;
    "ConvertedToERC20(uint256,address,uint256)": EventFragment;
    "DividendPaid(address,uint256,uint256)": EventFragment;
    "Engraved(address,uint256,string)": EventFragment;
    "ForgeBurn(address,uint256,uint256)": EventFragment;
    "Forged(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LotteryWinner(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConvertedToERC1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertedToERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Engraved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Forged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryWinner"): EventFragment;
}

export class RadiusTokenLib extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RadiusTokenLibInterface;

  functions: {
    CATALYST(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CATALYST()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FORGE_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FORGE_DIVISOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "GAS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOTTERY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    RADIUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "RADIUS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    RADIUS_FEEPERTHOU(overrides?: CallOverrides): Promise<[BigNumber]>;

    "RADIUS_FEEPERTHOU()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  CATALYST(overrides?: CallOverrides): Promise<BigNumber>;

  "CATALYST()"(overrides?: CallOverrides): Promise<BigNumber>;

  FORGE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  "FORGE_DIVISOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  GAS(overrides?: CallOverrides): Promise<BigNumber>;

  "GAS()"(overrides?: CallOverrides): Promise<BigNumber>;

  LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

  "LOTTERY()"(overrides?: CallOverrides): Promise<BigNumber>;

  RADIUS(overrides?: CallOverrides): Promise<BigNumber>;

  "RADIUS()"(overrides?: CallOverrides): Promise<BigNumber>;

  RADIUS_FEEPERTHOU(overrides?: CallOverrides): Promise<BigNumber>;

  "RADIUS_FEEPERTHOU()"(overrides?: CallOverrides): Promise<BigNumber>;

  hash(
    origin: string,
    ___salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "hash(address,uint256)"(
    origin: string,
    ___salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CATALYST(overrides?: CallOverrides): Promise<BigNumber>;

    "CATALYST()"(overrides?: CallOverrides): Promise<BigNumber>;

    FORGE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FORGE_DIVISOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    GAS(overrides?: CallOverrides): Promise<BigNumber>;

    "GAS()"(overrides?: CallOverrides): Promise<BigNumber>;

    LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<BigNumber>;

    RADIUS(overrides?: CallOverrides): Promise<BigNumber>;

    "RADIUS()"(overrides?: CallOverrides): Promise<BigNumber>;

    RADIUS_FEEPERTHOU(overrides?: CallOverrides): Promise<BigNumber>;

    "RADIUS_FEEPERTHOU()"(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ConvertedToERC1155(
      id: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;

    ConvertedToERC20(
      id: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;

    DividendPaid(claimant: string | null, id: null, amount: null): EventFilter;

    Engraved(
      account: string | null,
      id: BigNumberish | null,
      engraving: null
    ): EventFilter;

    ForgeBurn(
      burner: string | null,
      gasBurned: null,
      catalystBurned: null
    ): EventFilter;

    Forged(
      recipient: string | null,
      forgedIndex: BigNumberish | null,
      salt: null,
      consumed: null,
      amount: null
    ): EventFilter;

    LotteryWinner(
      recipient: string | null,
      hashval: null,
      gasWon: null,
      catalystWon: null
    ): EventFilter;
  };

  estimateGas: {
    CATALYST(overrides?: CallOverrides): Promise<BigNumber>;

    "CATALYST()"(overrides?: CallOverrides): Promise<BigNumber>;

    FORGE_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FORGE_DIVISOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    GAS(overrides?: CallOverrides): Promise<BigNumber>;

    "GAS()"(overrides?: CallOverrides): Promise<BigNumber>;

    LOTTERY(overrides?: CallOverrides): Promise<BigNumber>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<BigNumber>;

    RADIUS(overrides?: CallOverrides): Promise<BigNumber>;

    "RADIUS()"(overrides?: CallOverrides): Promise<BigNumber>;

    RADIUS_FEEPERTHOU(overrides?: CallOverrides): Promise<BigNumber>;

    "RADIUS_FEEPERTHOU()"(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CATALYST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CATALYST()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FORGE_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FORGE_DIVISOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GAS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOTTERY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOTTERY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RADIUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RADIUS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RADIUS_FEEPERTHOU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RADIUS_FEEPERTHOU()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
