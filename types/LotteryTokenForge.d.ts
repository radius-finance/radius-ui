/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LotteryTokenForgeInterface extends ethers.utils.Interface {
  functions: {
    "__SecuredNonfungibleTimeDecayTokenForge_init(address,uint256,uint128,uint256,uint256,uint256,uint256)": FunctionFragment;
    "__SecuredNonfungibleTokenForge_init(address,uint256,uint128,uint256,uint256,uint256)": FunctionFragment;
    "__TokenForge_init(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "actualForgedAmount(uint256)": FunctionFragment;
    "adjustDifficulty()": FunctionFragment;
    "checkAgainst(uint256,uint256)": FunctionFragment;
    "checkHash(uint256,uint128)": FunctionFragment;
    "difficultyOvershootIndex(uint256,uint128)": FunctionFragment;
    "forgeItem(uint256,address,uint256,uint128)": FunctionFragment;
    "getDifficulty()": FunctionFragment;
    "getHash()": FunctionFragment;
    "getLastDifficultyAdjustTime()": FunctionFragment;
    "getNextDifficulty()": FunctionFragment;
    "getTargetMintAmount()": FunctionFragment;
    "getTargetMintSpan()": FunctionFragment;
    "getThisPeriodMinted()": FunctionFragment;
    "getTimespanMintAverage()": FunctionFragment;
    "getTimespanMintDeviationAverage()": FunctionFragment;
    "getTotalMinted()": FunctionFragment;
    "hash(address,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "recordTokenMintEvent(uint256)": FunctionFragment;
    "salt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__SecuredNonfungibleTimeDecayTokenForge_init",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__SecuredNonfungibleTokenForge_init",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__TokenForge_init",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "actualForgedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAgainst",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "difficultyOvershootIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeItem",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastDifficultyAdjustTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetMintAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetMintSpan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThisPeriodMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimespanMintAverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimespanMintDeviationAverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "recordTokenMintEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "salt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "__SecuredNonfungibleTimeDecayTokenForge_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__SecuredNonfungibleTokenForge_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__TokenForge_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actualForgedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAgainst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "difficultyOvershootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forgeItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastDifficultyAdjustTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetMintSpan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThisPeriodMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimespanMintAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimespanMintDeviationAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordTokenMintEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;

  events: {
    "TokenForgeRecorded(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenForgeRecorded"): EventFragment;
}

export class LotteryTokenForge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LotteryTokenForgeInterface;

  functions: {
    __SecuredNonfungibleTimeDecayTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__SecuredNonfungibleTimeDecayTokenForge_init(address,uint256,uint128,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __SecuredNonfungibleTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__SecuredNonfungibleTokenForge_init(address,uint256,uint128,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __TokenForge_init(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__TokenForge_init(address,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    actualForgedAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "actualForgedAmount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    adjustDifficulty(overrides?: Overrides): Promise<ContractTransaction>;

    "adjustDifficulty()"(overrides?: Overrides): Promise<ContractTransaction>;

    checkAgainst(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkAgainst(uint256,uint256)"(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkHash(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkHash(uint256,uint128)"(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    difficultyOvershootIndex(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "difficultyOvershootIndex(uint256,uint128)"(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forgeItem(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forgeItem(uint256,address,uint256,uint128)"(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDifficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDifficulty()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getHash()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastDifficultyAdjustTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastDifficultyAdjustTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextDifficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextDifficulty()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetMintAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTargetMintAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetMintSpan(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTargetMintSpan()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getThisPeriodMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getThisPeriodMinted()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimespanMintAverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTimespanMintAverage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimespanMintDeviationAverage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTimespanMintDeviationAverage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalMinted()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recordTokenMintEvent(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordTokenMintEvent(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    salt(overrides?: Overrides): Promise<ContractTransaction>;

    "salt()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  __SecuredNonfungibleTimeDecayTokenForge_init(
    _token: string,
    _id: BigNumberish,
    _range: BigNumberish,
    _difficulty: BigNumberish,
    _targetMint: BigNumberish,
    _targetMintSpan: BigNumberish,
    _halvingRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__SecuredNonfungibleTimeDecayTokenForge_init(address,uint256,uint128,uint256,uint256,uint256,uint256)"(
    _token: string,
    _id: BigNumberish,
    _range: BigNumberish,
    _difficulty: BigNumberish,
    _targetMint: BigNumberish,
    _targetMintSpan: BigNumberish,
    _halvingRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __SecuredNonfungibleTokenForge_init(
    _token: string,
    _id: BigNumberish,
    _range: BigNumberish,
    _difficulty: BigNumberish,
    _targetMint: BigNumberish,
    _targetMintSpan: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__SecuredNonfungibleTokenForge_init(address,uint256,uint128,uint256,uint256,uint256)"(
    _token: string,
    _id: BigNumberish,
    _range: BigNumberish,
    _difficulty: BigNumberish,
    _targetMint: BigNumberish,
    _targetMintSpan: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __TokenForge_init(
    _token: string,
    _id: BigNumberish,
    _difficulty: BigNumberish,
    _targetMint: BigNumberish,
    _targetMintSpan: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__TokenForge_init(address,uint256,uint256,uint256,uint256)"(
    _token: string,
    _id: BigNumberish,
    _difficulty: BigNumberish,
    _targetMint: BigNumberish,
    _targetMintSpan: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  actualForgedAmount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "actualForgedAmount(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adjustDifficulty(overrides?: Overrides): Promise<ContractTransaction>;

  "adjustDifficulty()"(overrides?: Overrides): Promise<ContractTransaction>;

  checkAgainst(
    _hash: BigNumberish,
    _difficulty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkAgainst(uint256,uint256)"(
    _hash: BigNumberish,
    _difficulty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkHash(
    _hash: BigNumberish,
    catalystAdjust: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkHash(uint256,uint128)"(
    _hash: BigNumberish,
    catalystAdjust: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  difficultyOvershootIndex(
    hashVal: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "difficultyOvershootIndex(uint256,uint128)"(
    hashVal: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forgeItem(
    forgingDiffId: BigNumberish,
    forgee: string,
    hashVal: BigNumberish,
    catalystAdjust: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forgeItem(uint256,address,uint256,uint128)"(
    forgingDiffId: BigNumberish,
    forgee: string,
    hashVal: BigNumberish,
    catalystAdjust: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "getDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  getHash(overrides?: CallOverrides): Promise<BigNumber>;

  "getHash()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLastDifficultyAdjustTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastDifficultyAdjustTime()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "getNextDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetMintAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getTargetMintAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetMintSpan(overrides?: CallOverrides): Promise<BigNumber>;

  "getTargetMintSpan()"(overrides?: CallOverrides): Promise<BigNumber>;

  getThisPeriodMinted(overrides?: CallOverrides): Promise<BigNumber>;

  "getThisPeriodMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTimespanMintAverage(overrides?: CallOverrides): Promise<BigNumber>;

  "getTimespanMintAverage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTimespanMintDeviationAverage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTimespanMintDeviationAverage()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

  hash(
    origin: string,
    ___salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "hash(address,uint256)"(
    origin: string,
    ___salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recordTokenMintEvent(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordTokenMintEvent(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  salt(overrides?: Overrides): Promise<ContractTransaction>;

  "salt()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    __SecuredNonfungibleTimeDecayTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__SecuredNonfungibleTimeDecayTokenForge_init(address,uint256,uint128,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __SecuredNonfungibleTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__SecuredNonfungibleTokenForge_init(address,uint256,uint128,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __TokenForge_init(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__TokenForge_init(address,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    actualForgedAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "actualForgedAmount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "adjustDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkAgainst(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkAgainst(uint256,uint256)"(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkHash(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkHash(uint256,uint128)"(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    difficultyOvershootIndex(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "difficultyOvershootIndex(uint256,uint128)"(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forgeItem(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "forgeItem(uint256,address,uint256,uint128)"(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "getDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastDifficultyAdjustTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastDifficultyAdjustTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetMintAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getTargetMintAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetMintSpan(overrides?: CallOverrides): Promise<BigNumber>;

    "getTargetMintSpan()"(overrides?: CallOverrides): Promise<BigNumber>;

    getThisPeriodMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "getThisPeriodMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTimespanMintAverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimespanMintAverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTimespanMintDeviationAverage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimespanMintDeviationAverage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_token: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recordTokenMintEvent(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recordTokenMintEvent(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    salt(overrides?: CallOverrides): Promise<BigNumber>;

    "salt()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    TokenForgeRecorded(
      tokenDiff: string | null,
      timestamp: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    __SecuredNonfungibleTimeDecayTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__SecuredNonfungibleTimeDecayTokenForge_init(address,uint256,uint128,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __SecuredNonfungibleTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__SecuredNonfungibleTokenForge_init(address,uint256,uint128,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __TokenForge_init(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__TokenForge_init(address,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    actualForgedAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "actualForgedAmount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustDifficulty(overrides?: Overrides): Promise<BigNumber>;

    "adjustDifficulty()"(overrides?: Overrides): Promise<BigNumber>;

    checkAgainst(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkAgainst(uint256,uint256)"(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkHash(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkHash(uint256,uint128)"(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    difficultyOvershootIndex(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "difficultyOvershootIndex(uint256,uint128)"(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forgeItem(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forgeItem(uint256,address,uint256,uint128)"(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "getDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastDifficultyAdjustTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastDifficultyAdjustTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetMintAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getTargetMintAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetMintSpan(overrides?: CallOverrides): Promise<BigNumber>;

    "getTargetMintSpan()"(overrides?: CallOverrides): Promise<BigNumber>;

    getThisPeriodMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "getThisPeriodMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTimespanMintAverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimespanMintAverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTimespanMintDeviationAverage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimespanMintDeviationAverage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recordTokenMintEvent(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordTokenMintEvent(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    salt(overrides?: Overrides): Promise<BigNumber>;

    "salt()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __SecuredNonfungibleTimeDecayTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__SecuredNonfungibleTimeDecayTokenForge_init(address,uint256,uint128,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      _halvingRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __SecuredNonfungibleTokenForge_init(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__SecuredNonfungibleTokenForge_init(address,uint256,uint128,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _range: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __TokenForge_init(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__TokenForge_init(address,uint256,uint256,uint256,uint256)"(
      _token: string,
      _id: BigNumberish,
      _difficulty: BigNumberish,
      _targetMint: BigNumberish,
      _targetMintSpan: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    actualForgedAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "actualForgedAmount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjustDifficulty(overrides?: Overrides): Promise<PopulatedTransaction>;

    "adjustDifficulty()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    checkAgainst(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkAgainst(uint256,uint256)"(
      _hash: BigNumberish,
      _difficulty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkHash(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkHash(uint256,uint128)"(
      _hash: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    difficultyOvershootIndex(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "difficultyOvershootIndex(uint256,uint128)"(
      hashVal: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forgeItem(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forgeItem(uint256,address,uint256,uint128)"(
      forgingDiffId: BigNumberish,
      forgee: string,
      hashVal: BigNumberish,
      catalystAdjust: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDifficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDifficulty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastDifficultyAdjustTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastDifficultyAdjustTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextDifficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextDifficulty()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetMintAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTargetMintAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetMintSpan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTargetMintSpan()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThisPeriodMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getThisPeriodMinted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimespanMintAverage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimespanMintAverage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimespanMintDeviationAverage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimespanMintDeviationAverage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalMinted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hash(address,uint256)"(
      origin: string,
      ___salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recordTokenMintEvent(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordTokenMintEvent(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    salt(overrides?: Overrides): Promise<PopulatedTransaction>;

    "salt()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
