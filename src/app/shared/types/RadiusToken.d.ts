/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RadiusTokenInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "RADIUS_ERC1155_TOKEN_ADMIN()": FunctionFragment;
    "addAllowedMinter(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "burnPerm(address,uint256,uint256)": FunctionFragment;
    "checkLotteryManyErc20(address,uint8)": FunctionFragment;
    "claimDividend(address)": FunctionFragment;
    "convert(address,uint256,uint256)": FunctionFragment;
    "currentDividendClaimAmount(address,uint256)": FunctionFragment;
    "decMintMapValue(uint256,address,uint256)": FunctionFragment;
    "decimals(uint256)": FunctionFragment;
    "engrave(address,uint256,string)": FunctionFragment;
    "forgeManyErc20(address,uint8,uint256)": FunctionFragment;
    "gemTotalSupply()": FunctionFragment;
    "getEngravingAddressAt(uint256,uint256)": FunctionFragment;
    "getEngravingAt(uint256,uint256)": FunctionFragment;
    "getEngravingCount(uint256)": FunctionFragment;
    "getErc20TokenAddress(uint256)": FunctionFragment;
    "getMintMapValue(uint256,address)": FunctionFragment;
    "getPowerupShares(address,uint8)": FunctionFragment;
    "getRelicShares(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTokenForge(uint256)": FunctionFragment;
    "getTokenHeldByAt(address,uint256)": FunctionFragment;
    "getTokenHeldCount(address)": FunctionFragment;
    "getTokenHolderAt(uint256,uint256)": FunctionFragment;
    "getTokenHolderCount(uint256)": FunctionFragment;
    "getTotalDividends(uint256)": FunctionFragment;
    "getTotalPowerupShares(uint8)": FunctionFragment;
    "getTotalRelicShares()": FunctionFragment;
    "getUnpaidLottery(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "incMintMapValue(uint256,address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAllowedMinter(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "powerupTotalSupply(uint8)": FunctionFragment;
    "relicTotalSupply()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setDecimals(uint256,uint8)": FunctionFragment;
    "setErc20TokenAddress(uint256,address)": FunctionFragment;
    "setTokenForge(uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RADIUS_ERC1155_TOKEN_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPerm",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLotteryManyErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividend",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDividendClaimAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decMintMapValue",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "engrave",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeManyErc20",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gemTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEngravingAddressAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEngravingAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEngravingCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getErc20TokenAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintMapValue",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerupShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelicShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenForge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHeldByAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHeldCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHolderAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHolderCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDividends",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPowerupShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRelicShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaidLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incMintMapValue",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerupTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relicTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setErc20TokenAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenForge",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RADIUS_ERC1155_TOKEN_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnPerm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkLotteryManyErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDividendClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decMintMapValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "engrave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forgeManyErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gemTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngravingAddressAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngravingAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngravingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getErc20TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintMapValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerupShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelicShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenForge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHeldByAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHeldCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHolderAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHolderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPowerupShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRelicShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpaidLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incMintMapValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerupTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relicTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setErc20TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenForge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConvertedToERC1155(uint256,address,uint256)": EventFragment;
    "ConvertedToERC20(uint256,address,uint256)": EventFragment;
    "DividendPaid(address,uint256,uint256)": EventFragment;
    "Engraved(uint256,address,string)": EventFragment;
    "ForgeBurn(address,uint256,uint256)": EventFragment;
    "Forged(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LotteryWinner(address,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertedToERC1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertedToERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Engraved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Forged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class RadiusToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RadiusTokenInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    RADIUS_ERC1155_TOKEN_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "RADIUS_ERC1155_TOKEN_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    addAllowedMinter(
      minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAllowedMinter(address)"(
      minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnBatch(address,uint256[],uint256[])"(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnPerm(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnPerm(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkLotteryManyErc20(
      forgee: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "checkLotteryManyErc20(address,uint8)"(
      forgee: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    claimDividend(
      claimant: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimDividend(address)"(
      claimant: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convert(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convert(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentDividendClaimAmount(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentDividendClaimAmount(address,uint256)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(id: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    "decimals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    engrave(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "engrave(address,uint256,string)"(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forgeManyErc20(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "forgeManyErc20(address,uint8,uint256)"(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    gemTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "gemTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEngravingAddressAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEngravingAddressAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEngravingAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEngravingAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEngravingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEngravingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getErc20TokenAddress(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getErc20TokenAddress(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintMapValue(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMintMapValue(uint256,address)"(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPowerupShares(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPowerupShares(address,uint8)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRelicShares(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRelicShares(address)"(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenForge(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTokenForge(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenHeldByAt(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTokenHeldByAt(address,uint256)"(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenHeldCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTokenHeldCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenHolderAt(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTokenHolderAt(uint256,uint256)"(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenHolderCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTokenHolderCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDividends(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalDividends(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPowerupShares(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalPowerupShares(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalRelicShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalRelicShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnpaidLottery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUnpaidLottery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    isAllowedMinter(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAllowedMinter(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    powerupTotalSupply(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "powerupTotalSupply(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relicTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "relicTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDecimals(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDecimals(uint256,uint8)"(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setErc20TokenAddress(
      id: BigNumberish,
      erc20token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setErc20TokenAddress(uint256,address)"(
      id: BigNumberish,
      erc20token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenForge(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenForge(uint256,address)"(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  RADIUS_ERC1155_TOKEN_ADMIN(overrides?: CallOverrides): Promise<string>;

  "RADIUS_ERC1155_TOKEN_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  addAllowedMinter(
    minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAllowedMinter(address)"(
    minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256,uint256)"(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnBatch(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnBatch(address,uint256[],uint256[])"(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnPerm(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnPerm(address,uint256,uint256)"(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkLotteryManyErc20(
    forgee: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "checkLotteryManyErc20(address,uint8)"(
    forgee: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  claimDividend(
    claimant: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimDividend(address)"(
    claimant: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convert(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convert(address,uint256,uint256)"(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentDividendClaimAmount(
    claimant: string,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentDividendClaimAmount(address,uint256)"(
    claimant: string,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decMintMapValue(
    id: BigNumberish,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decMintMapValue(uint256,address,uint256)"(
    id: BigNumberish,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "decimals(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  engrave(
    engraver: string,
    id: BigNumberish,
    engraving: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "engrave(address,uint256,string)"(
    engraver: string,
    id: BigNumberish,
    engraving: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forgeManyErc20(
    forgee: string,
    amount: BigNumberish,
    catalystValue: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "forgeManyErc20(address,uint8,uint256)"(
    forgee: string,
    amount: BigNumberish,
    catalystValue: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  gemTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "gemTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEngravingAddressAt(
    id: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEngravingAddressAt(uint256,uint256)"(
    id: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEngravingAt(
    id: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEngravingAt(uint256,uint256)"(
    id: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEngravingCount(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEngravingCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getErc20TokenAddress(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getErc20TokenAddress(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintMapValue(
    id: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMintMapValue(uint256,address)"(
    id: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerupShares(
    claimant: string,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPowerupShares(address,uint8)"(
    claimant: string,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRelicShares(
    claimant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRelicShares(address)"(
    claimant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenForge(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenForge(uint256)"(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenHeldByAt(
    account: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenHeldByAt(address,uint256)"(
    account: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenHeldCount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenHeldCount(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenHolderAt(
    id: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenHolderAt(uint256,uint256)"(
    id: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenHolderCount(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenHolderCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDividends(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalDividends(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPowerupShares(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalPowerupShares(uint8)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRelicShares(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalRelicShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUnpaidLottery(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUnpaidLottery(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incMintMapValue(
    id: BigNumberish,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incMintMapValue(uint256,address,uint256)"(
    id: BigNumberish,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  isAllowedMinter(minter: string, overrides?: CallOverrides): Promise<boolean>;

  "isAllowedMinter(address)"(
    minter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256)"(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  powerupTotalSupply(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "powerupTotalSupply(uint8)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relicTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "relicTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDecimals(
    id: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDecimals(uint256,uint8)"(
    id: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setErc20TokenAddress(
    id: BigNumberish,
    erc20token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setErc20TokenAddress(uint256,address)"(
    id: BigNumberish,
    erc20token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenForge(
    tokenIndex: BigNumberish,
    diffObj: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenForge(uint256,address)"(
    tokenIndex: BigNumberish,
    diffObj: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    RADIUS_ERC1155_TOKEN_ADMIN(overrides?: CallOverrides): Promise<string>;

    "RADIUS_ERC1155_TOKEN_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    addAllowedMinter(minter: string, overrides?: CallOverrides): Promise<void>;

    "addAllowedMinter(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "burnBatch(address,uint256[],uint256[])"(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnPerm(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnPerm(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkLotteryManyErc20(
      forgee: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkLotteryManyErc20(address,uint8)"(
      forgee: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimDividend(claimant: string, overrides?: CallOverrides): Promise<void>;

    "claimDividend(address)"(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<void>;

    convert(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "convert(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentDividendClaimAmount(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentDividendClaimAmount(address,uint256)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "decimals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    engrave(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "engrave(address,uint256,string)"(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forgeManyErc20(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forgeManyErc20(address,uint8,uint256)"(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gemTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "gemTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEngravingAddressAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEngravingAddressAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEngravingAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEngravingAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEngravingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEngravingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErc20TokenAddress(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getErc20TokenAddress(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintMapValue(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMintMapValue(uint256,address)"(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerupShares(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerupShares(address,uint8)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelicShares(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRelicShares(address)"(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenForge(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenForge(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenHeldByAt(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHeldByAt(address,uint256)"(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHeldCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHeldCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHolderAt(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenHolderAt(uint256,uint256)"(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenHolderCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHolderCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividends(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDividends(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPowerupShares(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPowerupShares(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRelicShares(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalRelicShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnpaidLottery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnpaidLottery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isAllowedMinter(
      minter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedMinter(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    powerupTotalSupply(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "powerupTotalSupply(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relicTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "relicTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecimals(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDecimals(uint256,uint8)"(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setErc20TokenAddress(
      id: BigNumberish,
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setErc20TokenAddress(uint256,address)"(
      id: BigNumberish,
      erc20token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenForge(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenForge(uint256,address)"(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    ConvertedToERC1155(
      id: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;

    ConvertedToERC20(
      id: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;

    DividendPaid(claimant: string | null, id: null, amount: null): EventFilter;

    Engraved(
      id: BigNumberish | null,
      account: string | null,
      engraving: null
    ): EventFilter;

    ForgeBurn(
      burner: string | null,
      gasBurned: null,
      catalystBurned: null
    ): EventFilter;

    Forged(
      recipient: string | null,
      forgedIndex: BigNumberish | null,
      salt: null,
      consumed: null,
      amount: null
    ): EventFilter;

    LotteryWinner(
      recipient: string | null,
      nonce: null,
      gasWon: null,
      catalystWon: null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    RADIUS_ERC1155_TOKEN_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "RADIUS_ERC1155_TOKEN_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAllowedMinter(minter: string, overrides?: Overrides): Promise<BigNumber>;

    "addAllowedMinter(address)"(
      minter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnBatch(address,uint256[],uint256[])"(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnPerm(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnPerm(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkLotteryManyErc20(
      forgee: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "checkLotteryManyErc20(address,uint8)"(
      forgee: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    claimDividend(claimant: string, overrides?: Overrides): Promise<BigNumber>;

    "claimDividend(address)"(
      claimant: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    convert(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convert(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentDividendClaimAmount(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentDividendClaimAmount(address,uint256)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "decimals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    engrave(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "engrave(address,uint256,string)"(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forgeManyErc20(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "forgeManyErc20(address,uint8,uint256)"(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    gemTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "gemTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEngravingAddressAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEngravingAddressAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEngravingAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEngravingAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEngravingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEngravingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErc20TokenAddress(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getErc20TokenAddress(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintMapValue(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMintMapValue(uint256,address)"(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerupShares(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerupShares(address,uint8)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelicShares(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRelicShares(address)"(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenForge(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenForge(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHeldByAt(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHeldByAt(address,uint256)"(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHeldCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHeldCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHolderAt(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHolderAt(uint256,uint256)"(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHolderCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenHolderCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividends(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDividends(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPowerupShares(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPowerupShares(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRelicShares(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalRelicShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnpaidLottery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnpaidLottery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    isAllowedMinter(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedMinter(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    powerupTotalSupply(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "powerupTotalSupply(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relicTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "relicTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDecimals(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDecimals(uint256,uint8)"(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setErc20TokenAddress(
      id: BigNumberish,
      erc20token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setErc20TokenAddress(uint256,address)"(
      id: BigNumberish,
      erc20token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenForge(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenForge(uint256,address)"(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RADIUS_ERC1155_TOKEN_ADMIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "RADIUS_ERC1155_TOKEN_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAllowedMinter(
      minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAllowedMinter(address)"(
      minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnBatch(address,uint256[],uint256[])"(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnPerm(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnPerm(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkLotteryManyErc20(
      forgee: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "checkLotteryManyErc20(address,uint8)"(
      forgee: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    claimDividend(
      claimant: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimDividend(address)"(
      claimant: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convert(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convert(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentDividendClaimAmount(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentDividendClaimAmount(address,uint256)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decimals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    engrave(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "engrave(address,uint256,string)"(
      engraver: string,
      id: BigNumberish,
      engraving: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forgeManyErc20(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "forgeManyErc20(address,uint8,uint256)"(
      forgee: string,
      amount: BigNumberish,
      catalystValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    gemTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gemTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEngravingAddressAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEngravingAddressAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEngravingAt(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEngravingAt(uint256,uint256)"(
      id: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEngravingCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEngravingCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getErc20TokenAddress(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getErc20TokenAddress(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintMapValue(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMintMapValue(uint256,address)"(
      id: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerupShares(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPowerupShares(address,uint8)"(
      claimant: string,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelicShares(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelicShares(address)"(
      claimant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenForge(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenForge(uint256)"(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenHeldByAt(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenHeldByAt(address,uint256)"(
      account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenHeldCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenHeldCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenHolderAt(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenHolderAt(uint256,uint256)"(
      id: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenHolderCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenHolderCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDividends(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDividends(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPowerupShares(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPowerupShares(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRelicShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalRelicShares()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpaidLottery(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnpaidLottery(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incMintMapValue(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incMintMapValue(uint256,address,uint256)"(
      id: BigNumberish,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isAllowedMinter(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedMinter(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerupTotalSupply(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "powerupTotalSupply(uint8)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relicTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relicTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDecimals(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDecimals(uint256,uint8)"(
      id: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setErc20TokenAddress(
      id: BigNumberish,
      erc20token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setErc20TokenAddress(uint256,address)"(
      id: BigNumberish,
      erc20token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenForge(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenForge(uint256,address)"(
      tokenIndex: BigNumberish,
      diffObj: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
